/**
 * jVocabulary.java
 * 
 * Copyright (c) 2002 David Zwarg <david.zwarg@gmail.com>
 * See LICENSE in the project root for copying permission.
 */

package com.zwarg.vocab;

import java.awt.*;
import javax.swing.*;
import com.sun.examples.*;

/**
 * 
 * @author davidz
 * @version 1.0
 */
public class jVocabulary extends javax.swing.JFrame {

  private JMenuBar jMenuBar3 = new JMenuBar();
  private JMenu jMenu5 = new JMenu();
  private JMenuItem jmiOpen = new JMenuItem();
  private javax.swing.JMenuItem jmiSave = new JMenuItem();
  private javax.swing.JMenuItem jmiClose = new JMenuItem();
  private javax.swing.JMenuItem jmiQuit = new JMenuItem();
  private javax.swing.JMenu jMenu6 = new JMenu();
  private javax.swing.JMenuItem jmiAdd = new JMenuItem();
  private javax.swing.JMenuItem jmiChange = new JMenuItem();
  private javax.swing.JMenuItem jmiRemove = new JMenuItem();
  private javax.swing.JMenu jMenu7 = new JMenu();
  private javax.swing.JMenuItem jmiAbout = new JMenuItem();
  private javax.swing.JMenuItem jmiHelp = new JMenuItem();
  private javax.swing.ButtonGroup buttonGroup1 = new ButtonGroup();
  private javax.swing.JLabel jLabel1 = new JLabel();
  private javax.swing.JTextField tfdWord = new JTextField();
  private javax.swing.JSeparator jSeparator2 = new JSeparator();
  private javax.swing.JLabel jLabel2 = new JLabel();
  private javax.swing.JRadioButton rbtDef1 = new JRadioButton();
  private javax.swing.JTextField tfdDef1 = new JTextField();
  private javax.swing.JRadioButton rbtDef2 = new JRadioButton();
  private javax.swing.JTextField tfdDef2 = new JTextField();
  private javax.swing.JRadioButton rbtDef3 = new JRadioButton();
  private javax.swing.JTextField tfdDef3 = new JTextField();
  private javax.swing.JRadioButton rbtDef4 = new JRadioButton();
  private javax.swing.JTextField tfdDef4 = new JTextField();
  private javax.swing.JSeparator jSeparator3 = new JSeparator();
  private javax.swing.JButton jbtPrev = new JButton();
  private javax.swing.JTextField tfdNum = new JTextField();
  private javax.swing.JButton jbtNext = new JButton();
  private javax.swing.JLabel lblStat = new JLabel();
  private javax.swing.JButton jButton1 = new JButton();
  private JPanel jPanel1 = new JPanel();
  private GridBagLayout gridBagLayout1 = new GridBagLayout();
  private JPanel jPanel2 = new JPanel();
  private JLabel lblStatus = new JLabel();
  private BorderLayout borderLayout2 = new BorderLayout();
  private JProgressBar prgProgress = new JProgressBar();

  private int numWords, numTested = 0, numToTest = 0;
  private String strOpenFile;
  private XMLUtils xmlDoc;
  private int mode, tmp, subNodes, right, wrong, answer;

  private int BROWSE_MODE = 0;
  private int START_MODE = 1;
  private int ADD_MODE = 2;
  private int CHANGE_MODE = 3;
  private int RUN_MODE = 4;

  private java.lang.Integer intTmp;
  private String strTmp;

  private int[][] usedWords, tmpWords, randWords;

  // the formatter for the score
  private java.text.DecimalFormat format = new java.text.DecimalFormat("##0.##%");
  private BorderLayout borderLayout1 = new BorderLayout();

  // The file dialog/chooser
  private JFileChooser chooser = new JFileChooser();
  private ExampleFileFilter filter = new ExampleFileFilter();

  // background word adder
  private BackgroundAddWord bkgAdd;

  /** Creates new form jVocabulary */
  public jVocabulary()
  {
    filter.addExtension("xml");
    filter.setDescription("XML File");
    chooser.setFileFilter(filter);

    mode = BROWSE_MODE;
    jbInit();
    pack();

    setDefaultCloseOperation( EXIT_ON_CLOSE );
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void jbInit() {//GEN-BEGIN:initComponents
    jPanel1.setLayout(gridBagLayout1);
    lblStat.setText(" ");
    lblStatus.setBorder(BorderFactory.createLoweredBevelBorder());
    lblStatus.setPreferredSize(new Dimension(200, 21));
    lblStatus.setText(" ");
    jPanel2.setLayout(borderLayout2);
    buttonGroup1.add(rbtDef1);
    buttonGroup1.add(rbtDef2);
    buttonGroup1.add(rbtDef3);
    buttonGroup1.add(rbtDef4);

    jMenu5.setText("File");
    jmiOpen.setText("Open");
    jmiOpen.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jmiOpenActionPerformed(evt);
      }
    });

    jMenu5.add(jmiOpen);
    jmiSave.setText("Save");
    jmiSave.setEnabled(false);
    jmiSave.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jmiSaveActionPerformed(evt);
      }
    });

    jMenu5.add(jmiSave);
    jmiClose.setText("Close");
    jmiClose.setEnabled(false);
    jmiClose.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jmiCloseActionPerformed(evt);
      }
    });

    jMenu5.add(jmiClose);
    jMenu5.addSeparator();
    jmiQuit.setText("Quit");
    jmiQuit.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jmiQuitActionPerformed(evt);
      }
    });

    jMenu5.add(jmiQuit);
    jMenuBar3.add(jMenu5);
    jMenu6.setText("Words");
    jmiAdd.setText("Add");
    jmiAdd.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jmiAddActionPerformed(evt);
      }
    });

    jMenu6.add(jmiAdd);
    jmiChange.setText("Change");
    jmiChange.setEnabled(false);
    jmiChange.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jmiChangeActionPerformed(evt);
      }
    });

    jMenu6.add(jmiChange);
    jmiRemove.setText("Remove");
    jmiRemove.setEnabled(false);
    jmiRemove.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jmiRemoveActionPerformed(evt);
      }
    });

    jMenu6.add(jmiRemove);
    jMenuBar3.add(jMenu6);
    jMenu7.setText("Help");
    jmiAbout.setText("About");
    jMenu7.add(jmiAbout);
    jmiHelp.setText("Help");
    jMenu7.add(jmiHelp);
    jMenuBar3.add(jMenu7);

    getContentPane().setLayout(borderLayout1);
    java.awt.GridBagConstraints gridBagConstraints1;

    setTitle("Java Vocabulary Builder");
    setResizable(false);

    jLabel1.setText("Word:");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;

    tfdWord.setEditable(false);
    tfdWord.setDisabledTextColor(java.awt.Color.black);
    tfdWord.setPreferredSize(new Dimension(150, 21));
    tfdWord.setMinimumSize(new java.awt.Dimension(350, 21));
    tfdWord.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        tfdWordKeyReleased(evt);
      }
    });

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    this.getContentPane().add(jPanel1, BorderLayout.CENTER);
    jPanel1.add(jLabel1,                        new GridBagConstraints(0, 0, 1, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 0, 0), 0, 0));
    jPanel1.add(tfdWord,                         new GridBagConstraints(1, 1, 3, 1, 1.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(5, 0, 5, 0), 0, 0));
    jPanel1.add(jLabel2,                          new GridBagConstraints(0, 3, 1, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 0, 0), 0, 0));
    jPanel1.add(rbtDef1,                     new GridBagConstraints(0, 4, 1, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 0, 0), 0, 0));
    jPanel1.add(rbtDef2,                  new GridBagConstraints(0, 5, 1, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 0, 0), 0, 0));
    jPanel1.add(jSeparator2,                  new GridBagConstraints(0, 2, 6, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(5, 5, 5, 5), 0, 0));
    jPanel1.add(rbtDef3,             new GridBagConstraints(0, 6, 1, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 0, 0), 0, 0));
    jPanel1.add(rbtDef4,            new GridBagConstraints(0, 7, 1, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 0, 0), 0, 0));
    jPanel1.add(jbtPrev,         new GridBagConstraints(0, 9, 1, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 5, 0), 0, 0));
    jPanel1.add(tfdNum,          new GridBagConstraints(1, 9, 1, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 5, 0), 0, 0));
    jPanel1.add(jbtNext,        new GridBagConstraints(2, 9, 1, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 5, 0), 0, 0));
    jPanel1.add(jSeparator3,             new GridBagConstraints(0, 8, 5, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(5, 5, 5, 5), 0, 0));
    jPanel1.add(jButton1,     new GridBagConstraints(4, 9, 1, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(5, 5, 5, 5), 0, 0));
    jPanel1.add(lblStat,   new GridBagConstraints(3, 9, 1, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets(0, 0, 0, 0), 0, 0));
    jPanel1.add(tfdDef1,      new GridBagConstraints(1, 4, 4, 1, 1.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(5, 5, 0, 5), 0, 0));
    jPanel1.add(tfdDef2,    new GridBagConstraints(1, 5, 4, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(5, 5, 0, 5), 0, 0));
    jPanel1.add(tfdDef3,   new GridBagConstraints(1, 6, 4, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(5, 5, 0, 5), 0, 0));
    jPanel1.add(tfdDef4,   new GridBagConstraints(1, 7, 4, 1, 0.0, 0.0
        ,GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets(5, 5, 0, 5), 0, 0));
    this.getContentPane().add(jPanel2,  BorderLayout.SOUTH);
    jPanel2.add(prgProgress,  BorderLayout.CENTER);
    jPanel2.add(lblStatus,  BorderLayout.WEST);

    jSeparator2.setPreferredSize(new Dimension(300, 5));
    jSeparator2.setMinimumSize(new java.awt.Dimension(200, 5));
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.insets = new java.awt.Insets(15, 0, 10, 0);

    jLabel2.setText("Definition:");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;

    rbtDef1.setEnabled(false);
    gridBagConstraints1 = new java.awt.GridBagConstraints();

    tfdDef1.setEditable(false);
    tfdDef1.setDisabledTextColor(java.awt.Color.black);
    tfdDef1.setPreferredSize(new java.awt.Dimension(178, 21));
    tfdDef1.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        tfdDef1KeyReleased(evt);
      }
    });

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.insets = new java.awt.Insets(2, 0, 2, 0);
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;

    rbtDef2.setEnabled(false);
    gridBagConstraints1 = new java.awt.GridBagConstraints();

    tfdDef2.setEditable(false);
    tfdDef2.setDisabledTextColor(java.awt.Color.black);
    tfdDef2.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        tfdDef2KeyReleased(evt);
      }
    });

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.insets = new java.awt.Insets(2, 0, 2, 0);

    rbtDef3.setEnabled(false);
    gridBagConstraints1 = new java.awt.GridBagConstraints();

    tfdDef3.setEditable(false);
    tfdDef3.setDisabledTextColor(java.awt.Color.black);
    tfdDef3.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        tfdDef3KeyReleased(evt);
      }
    });

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.insets = new java.awt.Insets(2, 0, 2, 0);

    rbtDef4.setEnabled(false);
    gridBagConstraints1 = new java.awt.GridBagConstraints();

    tfdDef4.setEditable(false);
    tfdDef4.setDisabledTextColor(java.awt.Color.black);
    tfdDef4.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyReleased(java.awt.event.KeyEvent evt) {
        tfdDef4KeyReleased(evt);
      }
    });

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.insets = new java.awt.Insets(2, 0, 2, 0);

    jSeparator3.setPreferredSize(new Dimension(300, 5));
    jSeparator3.setMinimumSize(new java.awt.Dimension(200, 5));
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.insets = new java.awt.Insets(15, 0, 10, 0);

    jbtPrev.setText("<<");
    jbtPrev.setPreferredSize(new java.awt.Dimension(50, 25));
    jbtPrev.setMaximumSize(new java.awt.Dimension(50, 25));
    jbtPrev.setMinimumSize(new java.awt.Dimension(50, 25));
    jbtPrev.setEnabled(false);
    jbtPrev.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbtPrevActionPerformed(evt);
      }
    });

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = 2;

    tfdNum.setEditable(false);
    tfdNum.setPreferredSize(new java.awt.Dimension(35, 25));
    tfdNum.setMinimumSize(new java.awt.Dimension(35, 25));
    tfdNum.addKeyListener(new java.awt.event.KeyAdapter() {
      public void keyPressed(java.awt.event.KeyEvent evt) {
        tfdNumKeyPressed(evt);
      }
    });

    gridBagConstraints1 = new java.awt.GridBagConstraints();

    jbtNext.setText(">>");
    jbtNext.setPreferredSize(new java.awt.Dimension(50, 25));
    jbtNext.setMaximumSize(new java.awt.Dimension(50, 25));
    jbtNext.setMinimumSize(new java.awt.Dimension(50, 25));
    jbtNext.setEnabled(false);
    jbtNext.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jbtNextActionPerformed(evt);
      }
    });

    gridBagConstraints1 = new java.awt.GridBagConstraints();

    lblStat.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.RELATIVE;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.weightx = 0.5;

    jButton1.setText("Start");
    jButton1.setPreferredSize(new java.awt.Dimension(75, 25));
    jButton1.setMaximumSize(new java.awt.Dimension(75, 25));
    jButton1.setMinimumSize(new java.awt.Dimension(75, 25));
    jButton1.setEnabled(false);
    jButton1.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jButton1ActionPerformed(evt);
      }
    });

    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;

    setJMenuBar(jMenuBar3);
  }

  private void tfdWordKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfdWordKeyReleased
    // Add your handling code here:
    if ( evt.getKeyCode() == evt.VK_ENTER )
    {
      tfdDef1.setEditable(true);
      tfdDef1.requestFocus();
    }
  }//GEN-LAST:event_tfdWordKeyReleased

  private void tfdDef1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfdDef1KeyReleased
    // Add your handling code here:
    if ( evt.getKeyCode() == evt.VK_ENTER )
    {
      tfdDef2.setEditable(true);
      tfdDef2.requestFocus();
    }
  }//GEN-LAST:event_tfdDef1KeyReleased

  private void tfdDef2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfdDef2KeyReleased
    // Add your handling code here:

    if ( evt.getKeyCode() == evt.VK_ENTER )
    {
      tfdDef3.setEditable(true);
      tfdDef3.requestFocus();
    }
    else if ( evt.getKeyCode() == evt.VK_BACK_SPACE || evt.getKeyCode() == evt.VK_DELETE )
    {
      if ( tfdDef2.getText().length() < 1 )
      {
        tfdDef2.setEditable(false);
        tfdDef1.requestFocus();
        evt.consume();
      }
    }
  }//GEN-LAST:event_tfdDef2KeyReleased

  private void tfdDef3KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfdDef3KeyReleased
    // Add your handling code here:
    evt.consume();

    if ( evt.getKeyCode() == evt.VK_ENTER )
    {
      tfdDef4.setEditable(true);
      tfdDef4.requestFocus();
    }
    else if ( evt.getKeyCode() == evt.VK_BACK_SPACE )
    {
      if ( tfdDef3.getText().length() < 1 )
      {
        tfdDef3.setEditable(false);
        tfdDef2.requestFocus();
        evt.consume();
      }
    }
  }//GEN-LAST:event_tfdDef3KeyReleased

  private void tfdDef4KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfdDef4KeyReleased
    // Add your handling code here:
    if ( evt.getKeyCode() == evt.VK_BACK_SPACE )
    {
      if ( tfdDef4.getText().length() < 1 )
      {
        tfdDef4.setEditable(false);
        tfdDef3.requestFocus();
        evt.consume();
      }
    }
  }//GEN-LAST:event_tfdDef4KeyReleased

  private void jmiChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiChangeActionPerformed
    // Add your handling code here:
    if ( mode == BROWSE_MODE )
    {
      strTmp = tfdWord.getText();

      tfdWord.setEditable(true);
      tfdDef1.setEditable(true);

      if ( tfdDef2.getText().length() > 1 )
      {
        tfdDef2.setEditable(true);
      }
      if ( tfdDef3.getText().length() > 1 )
      {
        tfdDef3.setEditable(true);
      }
      if ( tfdDef4.getText().length() > 1 )
      {
        tfdDef4.setEditable(true);
      }

      jButton1.setText("Change");
      jButton1.setEnabled(true);

      jbtPrev.setEnabled(false);
      jbtNext.setEnabled(false);
      tfdNum.setEditable(false);

      mode = CHANGE_MODE;
    }
  }//GEN-LAST:event_jmiChangeActionPerformed

  private void tfdNumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfdNumKeyPressed
    // Add your handling code here:
    if ( evt.getKeyCode() == evt.VK_ENTER )
    {
      if (tfdNum.getText().length() < 1)
      {
        formClear();
        return;
      }

      intTmp = new Integer( tfdNum.getText() );
      tmp = intTmp.intValue();

      if (tmp > xmlDoc.countNodes("word") - 1)
      {
        tmp = xmlDoc.countNodes("word") - 1;
      }
      else if (tmp < 0)
      {
        tmp = 0;
      }

      getWordAndDef( tmp );

      jmiChange.setEnabled(true);
      jmiRemove.setEnabled(true);
      tfdNum.setText( (new Integer(tmp)).toString() );
    }
  }//GEN-LAST:event_tfdNumKeyPressed

  private void jmiRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiRemoveActionPerformed
    // Add your handling code here:
    xmlDoc.removeXMLNode(tfdWord.getText() );

    tfdWord.setText("");
    tfdDef1.setText("");
    tfdDef2.setText("");
    tfdDef3.setText("");
    tfdDef4.setText("");

    jmiChange.setEnabled(false);
    jmiRemove.setEnabled(false);
  }//GEN-LAST:event_jmiRemoveActionPerformed

  private void jbtPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtPrevActionPerformed
    // Add your handling code here:
    if ( tfdNum.getText().length() < 1 )
    {
      tmp = 0;
    }
    else
    {
      try
      {
        intTmp = new Integer( tfdNum.getText() );
      }
      catch ( NumberFormatException nfe )
      {
        intTmp = new Integer( 0 );
      }
      tmp = intTmp.intValue() - 1;
    }

    if (tmp < 0)
    {
      tmp = 0;
    }

    getWordAndDef( tmp );

    jmiChange.setEnabled(true);
    jmiRemove.setEnabled(true);
    tfdNum.setText( (new Integer(tmp)).toString() );
  }//GEN-LAST:event_jbtPrevActionPerformed

  private void jbtNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtNextActionPerformed
    // Add your handling code here:
    if ( tfdNum.getText().length() < 1 )
    {
      tmp = 0;
    }
    else
    {
      try
      {
        intTmp = new Integer( tfdNum.getText() );
      }
      catch ( NumberFormatException nfe )
      {
        intTmp = new Integer( 0 );
      }
      tmp = intTmp.intValue() + 1;
    }

    if (tmp > xmlDoc.countNodes("word") - 1)
    {
      tmp = xmlDoc.countNodes("word") - 1;
    }

    getWordAndDef( tmp );

    jmiChange.setEnabled(true);
    jmiRemove.setEnabled(true);
    tfdNum.setText( (new Integer(tmp)).toString() );
  }//GEN-LAST:event_jbtNextActionPerformed

  private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    // Add your handling code here:
    if ( mode == ADD_MODE )
    {
      if ( bkgAdd.isRunning() ) {
        lblStatus.setText( "Please wait..." );
        return;
      }

      int intDefs = 0;

      if ( tfdDef1.isEditable() && tfdDef1.getText().length() > 1 )
        intDefs++;
      if ( tfdDef2.isEditable() && tfdDef2.getText().length() > 1 )
        intDefs++;
      if ( tfdDef3.isEditable() && tfdDef3.getText().length() > 1 )
        intDefs++;
      if ( tfdDef4.isEditable() && tfdDef4.getText().length() > 1 )
        intDefs++;

      String[] strDefs = new String[ intDefs ];

      if ( intDefs > 0 ) {
        strDefs[0] = tfdDef1.getText();
      }
      if ( intDefs > 1 ) {
        strDefs[1] = tfdDef2.getText();
      }
      if ( intDefs > 2 ) {
        strDefs[2] = tfdDef3.getText();
      }
      if ( intDefs > 3 ) {
        strDefs[3] = tfdDef4.getText();
      }

      tfdDef1.setText( "" );
      tfdDef2.setText( "" );
      tfdDef2.setEditable(false);
      tfdDef3.setText( "" );
      tfdDef3.setEditable(false);
      tfdDef4.setText( "" );
      tfdDef4.setEditable(false);

      bkgAdd.setWord ( tfdWord.getText() );
      bkgAdd.setDefinitions( strDefs );

      bkgAdd.start();

      tfdWord.setText( "" );

      tfdWord.requestFocus();

      jmiSave.setEnabled(true);
    }
    else if ( mode == CHANGE_MODE )
    {
      //Add change node code here
      tfdWord.setEditable(false);
      tfdDef1.setEditable(false);
      tfdDef2.setEditable(false);
      tfdDef3.setEditable(false);
      tfdDef4.setEditable(false);

      // strTmp has the value of the old word, in case word was misspelled
      xmlDoc.removeXMLNode( strTmp );

      if ( tfdWord.getText().length() > 1 )
      {
        if ( tfdDef1.getText().length() > 1 )
          xmlDoc.addXMLNode( tfdWord.getText(), tfdDef1.getText() );
        if ( tfdDef2.getText().length() > 1 )
          xmlDoc.addXMLNode( tfdWord.getText(), tfdDef2.getText() );
        if ( tfdDef3.getText().length() > 1 )
          xmlDoc.addXMLNode( tfdWord.getText(), tfdDef3.getText() );
        if ( tfdDef4.getText().length() > 1 )
          xmlDoc.addXMLNode( tfdWord.getText(), tfdDef4.getText() );
      }

      jbtPrev.setEnabled(true);
      jbtNext.setEnabled(true);
      jButton1.setText("Start");

      tfdNum.setEditable(true);

      mode = BROWSE_MODE;
    }
    else if ( mode == BROWSE_MODE )
    {
      if ( numToTest == 0 )
      {
        //Find how many words to test
        javax.swing.JOptionPane optNum = new javax.swing.JOptionPane();

        try {
          numToTest = new Integer( optNum.showInputDialog(this,
              new String("How many words to test?"),
              "Question", optNum.QUESTION_MESSAGE ) ).intValue();
        }
        catch (NumberFormatException nfe) {
          return;
        }
      }

      if ( numToTest != 0 )
      {
        mode = RUN_MODE;

        jbtNext.setEnabled(false);
        jbtPrev.setEnabled(false);
        tfdNum.setEditable(false);

        lblStat.setText( "" );
        jButton1.setText( "Okay" );

        rbtDef1.setEnabled(true);
        rbtDef1.setSelected(false);
        rbtDef2.setEnabled(true);
        rbtDef2.setSelected(false);
        rbtDef3.setEnabled(true);
        rbtDef3.setSelected(false);
        rbtDef4.setEnabled(true);
        rbtDef4.setSelected(false);

        int[][] randWords = new int[0][0];

        getRandWordsAndDefs();
      }
      else
      {
        randWords = null;
        numToTest = 0;
        numTested = 0;
        formClear();
        mode = BROWSE_MODE;
      }
    }
    else if ( mode == RUN_MODE )
    {
      if ( !rbtDef1.isSelected() && !rbtDef2.isSelected() &&
           !rbtDef3.isSelected() && !rbtDef4.isSelected() )
      {
        return;
      }

      if ( rbtDef1.isSelected() && answer == 0 )
        right++;
      else if ( rbtDef2.isSelected() && answer == 1 )
        right++;
      else if ( rbtDef3.isSelected() && answer == 2 )
        right++;
      else if ( rbtDef4.isSelected() && answer == 3 )
        right++;
      else
        wrong++;

      rbtDef1.setSelected(false);
      rbtDef2.setSelected(false);
      rbtDef3.setSelected(false);
      rbtDef4.setSelected(false);

      if ( numTested < numToTest )
      {
        lblStat.setText( format.format((double)right/(double)(right + wrong)) );
        int[][] randWords = new int[0][0];

        getRandWordsAndDefs();
      }
      else
      {
        randWords = null;
        numToTest = 0;
        numTested = 0;
        formClear();
        lblStat.setText( format.format( (double)right/(double)(right + wrong) ) );
        right = 0;
        wrong = 0;
        mode = BROWSE_MODE;
      }
    }
  }//GEN-LAST:event_jButton1ActionPerformed

  private void jmiCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCloseActionPerformed
    // Add your handling code here:
    tfdWord.setText("");
    tfdDef1.setText("");
    tfdDef2.setText("");
    tfdDef3.setText("");
    tfdDef4.setText("");

    strOpenFile = null;
    xmlDoc = null;

    jmiClose.setEnabled(false);
    jmiSave.setEnabled(false);
    jmiRemove.setEnabled(false);
    jmiChange.setEnabled(false);

    tfdNum.setEditable(false);
    jbtNext.setEnabled(false);
    jbtPrev.setEnabled(false);
  }//GEN-LAST:event_jmiCloseActionPerformed

  private void jmiSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveActionPerformed
    // Add your handling code here:
    ProgressMonitor prgMonitor;

    if ( strOpenFile == null )
    {
      if ( bkgAdd.isRunning() ) {
        lblStatus.setText( "Please wait..." );
        return;
      }

      int returnVal = chooser.showSaveDialog(this);

      if(returnVal == JFileChooser.APPROVE_OPTION)
      {
        strOpenFile = chooser.getCurrentDirectory().getPath();
        strOpenFile = strOpenFile + "/" + chooser.getSelectedFile().getName();

        xmlDoc.writeXMLDocument( strOpenFile );
      }
    }
    else
    {
      if ( bkgAdd.isRunning() )
        return;

      xmlDoc.writeXMLDocument( strOpenFile );
    }

    jmiSave.setEnabled(false);
  }//GEN-LAST:event_jmiSaveActionPerformed

  private void jmiOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiOpenActionPerformed
    // Add your handling code here:
    int returnVal = chooser.showOpenDialog(this);

    if ( returnVal == javax.swing.JFileChooser.APPROVE_OPTION )
    {
      strOpenFile = chooser.getCurrentDirectory().getPath();
      strOpenFile = strOpenFile + "/" + chooser.getSelectedFile().getName();

      xmlDoc = new XMLUtils();
      xmlDoc.openXMLDocument( strOpenFile );

      jmiSave.setEnabled(true);
      jmiClose.setEnabled(true);

      numWords = xmlDoc.countNodes( "word" );

      bkgAdd = new BackgroundAddWord( xmlDoc );
      bkgAdd.setProgressBar( this.prgProgress );

      jbtPrev.setEnabled(true);
      jbtNext.setEnabled(true);
      jButton1.setEnabled(true);

      tfdNum.setEditable(true);

      mode = BROWSE_MODE;
    }
    else
    {
      strOpenFile = null;
    }
  }//GEN-LAST:event_jmiOpenActionPerformed

  private void jmiAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAddActionPerformed
    // Add your handling code here:
    if ( mode == BROWSE_MODE || mode == START_MODE )
    {
      tfdWord.setText("");
      tfdDef1.setText("");
      tfdDef2.setText("");
      tfdDef3.setText("");
      tfdDef4.setText("");
      tfdNum.setText("");

      tfdWord.setEditable(true);
      tfdDef1.setEditable(true);
      tfdNum.setEditable(false);

      jmiClose.setEnabled(true);

      jbtNext.setEnabled(false);
      jbtPrev.setEnabled(false);
      jButton1.setText( "Add" );
      jButton1.setEnabled( true );

      if (strOpenFile == null)
      {
        xmlDoc = new XMLUtils();
        xmlDoc.newXMLDocument();
      }

      if ( bkgAdd == null )
        bkgAdd = new BackgroundAddWord( xmlDoc );

      mode = ADD_MODE;
      jmiAdd.setText("Finished");

      tfdWord.requestFocus();
    }
    else if (mode == ADD_MODE)
    {
      tfdWord.setText("");
      tfdWord.setEditable(false);

      tfdDef1.setText("");
      tfdDef1.setEditable(false);

      rbtDef1.setEnabled(false);

      jmiAdd.setText("Add");
      jmiChange.setEnabled(false);
      jmiRemove.setEnabled(false);

      if ( xmlDoc.countNodes( "word" ) > 0 )
      {
        tfdNum.setText("");
        tfdNum.setEditable(true);
        jbtNext.setEnabled(true);
        jbtPrev.setEnabled(true);
      }
      jButton1.setText("Start");

      mode = BROWSE_MODE;
    }
  }//GEN-LAST:event_jmiAddActionPerformed

  private void jmiQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiQuitActionPerformed
    // Add your handling code here:
    System.exit(0);
  }//GEN-LAST:event_jmiQuitActionPerformed

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    new jVocabulary().show();
  }

  private void getWordAndDef( int wordNum )
  {
    tfdWord.setText( xmlDoc.getWord( wordNum ) );

    subNodes = xmlDoc.countSubNodes( wordNum );

    if (subNodes > 0)
    {
      tfdDef1.setText( xmlDoc.getSubNode( wordNum, 0 ));
    }
    if (subNodes > 1)
    {
      tfdDef2.setText( xmlDoc.getSubNode( wordNum, 1 ));
    }
    else
    {
      tfdDef2.setText("");
    }
    if (subNodes > 2)
    {
      tfdDef3.setText( xmlDoc.getSubNode( wordNum, 2 ));
    }
    else
    {
      tfdDef3.setText("");
    }
    if (subNodes > 3)
    {
      tfdDef4.setText( xmlDoc.getSubNode( wordNum, 3 ));
    }
    else
    {
      tfdDef4.setText("");
    }
  }

  private void formClear()
  {
    tfdWord.setText("");
    tfdDef1.setText("");
    tfdDef2.setText("");
    tfdDef3.setText("");
    tfdDef4.setText("");
    tfdNum.setText("");

    tfdWord.setEditable(false);
    tfdDef1.setEditable(false);
    tfdDef2.setEditable(false);
    tfdDef3.setEditable(false);
    tfdDef4.setEditable(false);

    rbtDef1.setEnabled(false);
    rbtDef2.setEnabled(false);
    rbtDef3.setEnabled(false);
    rbtDef4.setEnabled(false);

    jmiAdd.setText("Add");
    jmiChange.setEnabled(false);
    jmiRemove.setEnabled(false);

    jButton1.setText("Start");
    jbtPrev.setEnabled(true);
    jbtNext.setEnabled(true);

    mode = BROWSE_MODE;
  }

  private int[][] pushWordAndDef( int[][] wordArray, int wordNum, int defNum )
  {
    if ( wordArray == null )
    {
      tmpWords = new int[1][2];
    }
    else
    {
      tmpWords = new int[wordArray.length + 1][2];
    }

    for( int i = 0; i < tmpWords.length - 1; i++ )
    {
      tmpWords[i][0] = wordArray[i][0];
      tmpWords[i][1] = wordArray[i][1];
    }

    tmpWords[tmpWords.length - 1][0] = wordNum;
    tmpWords[tmpWords.length - 1][1] = defNum;

    return tmpWords;
  }

  private boolean isWordUsed( int[][] wordArray, int wordNum )
  {
    if ( wordArray != null )
    {
      for ( int i = 0; i < wordArray.length; i++ )
      {
        if ( wordArray[i][0] == wordNum )
        {
        return true;
      }
      }
    }
    return false;
  }

  private void getRandWordsAndDefs()
  {
    //This is starting the test.
    int wordNum, wordTot, defNum, defTot;
    wordTot = xmlDoc.countNodes( "word" );
    wordNum = (int)(Math.random() * (double)wordTot);
    defTot = xmlDoc.countSubNodes( wordNum );
    defNum = (int)(Math.random() * (double)defTot);

    while ( isWordUsed( usedWords, wordNum ) )
    {
      wordNum = (int)(Math.random() * (double)wordTot);
      defTot = xmlDoc.countSubNodes( wordNum );
      defNum = (int)(Math.random() * (double)defTot);
    }

    numTested++;

    usedWords = pushWordAndDef( usedWords, wordNum, defNum );

    int phonyDef = (int)(Math.random() * (double)xmlDoc.countNodes("word"));
    int phonies = 0;

    while ( phonies < 3 )
    {
      while ( isWordUsed(randWords, phonyDef ) || phonyDef == wordNum )
      {
        phonyDef = (int)(Math.random() * (double)xmlDoc.countNodes("word"));
      }

      randWords = pushWordAndDef( randWords, phonyDef, (int)(Math.random() *
          (double)xmlDoc.countSubNodes( phonyDef ) ) );

      phonies++;
    }

    tfdWord.setText( xmlDoc.getWord( usedWords[usedWords.length - 1][0] ) );

    answer = (int)(3.9999 * Math.random());
    int nxtDef = 0;

    if (answer == 0 )
      tfdDef1.setText( xmlDoc.getSubNode( usedWords[usedWords.length - 1][0], usedWords[usedWords.length - 1][1] ) );
    else
      tfdDef1.setText( xmlDoc.getSubNode( randWords[nxtDef][0], randWords[nxtDef++][1] ) );

    if (answer == 1 )
      tfdDef2.setText( xmlDoc.getSubNode( usedWords[usedWords.length - 1][0], usedWords[usedWords.length - 1][1] ) );
    else
      tfdDef2.setText( xmlDoc.getSubNode( randWords[nxtDef][0], randWords[nxtDef++][1] ) );

    if (answer == 2 )
      tfdDef3.setText( xmlDoc.getSubNode( usedWords[usedWords.length - 1][0], usedWords[usedWords.length - 1][1] ) );
    else
      tfdDef3.setText( xmlDoc.getSubNode( randWords[nxtDef][0], randWords[nxtDef++][1] ) );

    if (answer == 3 )
      tfdDef4.setText( xmlDoc.getSubNode( usedWords[usedWords.length - 1][0], usedWords[usedWords.length - 1][1] ) );
    else
      tfdDef4.setText( xmlDoc.getSubNode( randWords[nxtDef][0], randWords[nxtDef][1] ) );

    randWords = null;
  }
}